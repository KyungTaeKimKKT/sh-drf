"""
Django settings for shapi project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env_file = os.path.join(BASE_DIR, '.env_dot')
dotenv.load_dotenv(env_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', "changeme")
IS_DOCKER = True if os.environ.get('IS_DOCKER', 'false') == 'true' else False

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =  True # bool(int(os.environ.get('DJANGO_DEBUG', 1)))
ALLOWED_HOSTS = ['*']

# ALLOWED_HOSTS = []+ os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(',')

FILE_UPLOAD_MAX_MEMORY_SIZE = int( os.environ.get('FILE_UPLOAD_MAX_MEMORY_SIZE', 1024 * 1024 * 1024) ) # 1GB

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # installed
    'django_celery_beat',
    'ckeditor',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # 블랙리스트 기능 활성화
    'rest_framework',
    'django_filters',
    'drf_spectacular',
    "corsheaders",
    'django_cleanup.apps.CleanupConfig',    #https://pypi.org/project/django-cleanup/
    'simple_history',
    'django_rq',
    # 'django_apscheduler',
    # created
    'release',       ### app release, update(auto)
    'users',
    '모니터링',
    '공지요청사항',
    '영업수주',
    '생산모니터링',
    '일일보고',
    '기준정보',
    '영업mbo',
    '샘플관리',
    'sale_design_manage_v1',
    'elevator_info',
    '작업지침',
    '생산지시',
    '생산관리',
    'serial',
    '재고관리',
    'SCM',
    # '하이생산',
    '망관리',

    '품질경영',
    '차량관리',

    'HR평가',
    'scraping', ## 정부기관 news

    'util',
    # 'messagebox',
    '모니터링_schedule',

    'config',
    'scheduler_job',
]

V2_APPS = [
    'users_V2',
    'HR평가_V2',
    '차량관리_V2',
    'CS_V2',

    'rtsp_cam',
    'ai_face',
]

INSTALLED_APPS += V2_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
        # https://pypi.org/project/django-cors-headers/
    "corsheaders.middleware.CorsMiddleware",
    'simple_history.middleware.HistoryRequestMiddleware',
    #### ✅ 25-7.4 추가
    '모니터링.middleware.ApiAccessLogMiddleware',
    # '모니터링.middleware.DRFApiAccessLogMiddleware',
]


ROOT_URLCONF = 'shapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'shapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default' :{
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST', dotenv.get_key(env_file, 'DB_HOST')),
        'NAME': os.environ.get('DB_NAME', dotenv.get_key(env_file, 'DB_NAME')),
        'USER': os.environ.get('DB_USER', dotenv.get_key(env_file, 'DB_USER')),
        'PASSWORD': os.environ.get('DB_PASSWORD', dotenv.get_key(env_file, 'DB_PASSWORD')),
        'PORT':os.environ.get('DB_PORT', dotenv.get_key(env_file, 'DB_PORT')),
        'CONN_MAX_AGE': int(os.environ.get('DB_CONN_MAX_AGE', dotenv.get_key(env_file, 'DB_CONN_MAX_AGE'))),  # 60초로 설정
        'CONN_HEALTH_CHECKS': True,  # ✅ 추가!
    },
    '생산모니터링' :{
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST_Prod_Monitering', dotenv.get_key(env_file, 'DB_HOST_Prod_Monitering')),
        'NAME': os.environ.get('DB_NAME_Prod_Monitering', dotenv.get_key(env_file, 'DB_NAME_Prod_Monitering')),
        'USER': os.environ.get('DB_USER_Prod_Monitering', dotenv.get_key(env_file, 'DB_USER_Prod_Monitering')),
        'PASSWORD': os.environ.get('DB_PASSWORD_Prod_Monitering', dotenv.get_key(env_file, 'DB_PASSWORD_Prod_Monitering')),
        'PORT':os.environ.get('DB_PORT_Prod_Monitering', dotenv.get_key(env_file, 'DB_PORT_Prod_Monitering')),
        'CONN_MAX_AGE': int(os.environ.get('DB_CONN_MAX_AGE', dotenv.get_key(env_file, 'DB_CONN_MAX_AGE'))),  # 300초로 설정
        'CONN_HEALTH_CHECKS': True,  # ✅ 추가!
    },

}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

##### Channels-specific settings

REDIS_HOST = os.environ.get('REDIS_HOST', dotenv.get_key(env_file, 'REDIS_HOST'))
REDIS_PORT = int(os.environ.get('REDIS_PORT', dotenv.get_key(env_file, 'REDIS_PORT')))
REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', dotenv.get_key(env_file, 'REDIS_PASSWORD'))

REDIS_DB_FOR_CHANNEL = int(os.environ.get('REDIS_DB_FOR_CHANNEL', dotenv.get_key(env_file, 'REDIS_DB_FOR_CHANNEL')))
REDIS_DB_FOR_CACHE = int(os.environ.get('REDIS_DB_FOR_CACHE', dotenv.get_key(env_file, 'REDIS_DB_FOR_CACHE')))

REDIS_BASE_URL = f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}"

REDIS_CHANNEL_URL = f"{REDIS_BASE_URL}/{REDIS_DB_FOR_CHANNEL}"
REDIS_CACHE_URL = f"{REDIS_BASE_URL}/{REDIS_DB_FOR_CACHE}"
# API 및 WS 서비스 모두에 적용
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [ (REDIS_CHANNEL_URL) ],
            # "hosts": [(REDIS_HOST, REDIS_PORT, REDIS_PASSWORD)],
            # "prefix": "channels",  # 선택적: 키 접두사 추가
            # "capacity": 1500,      # 선택적: 채널 용량 설정
            # "expiry": 60,          # 선택적: 메시지 만료 시간(초)
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URL,  # DB 1 사용
        # "OPTIONS": {
        #     "CLIENT_CLASS": "django_redis.client.DefaultClient",
        # }
    }
}

# Django-RQ 설정 추가
RQ_QUEUES = {
    'default': {
        'HOST': REDIS_HOST,
        'PORT': REDIS_PORT,
        'DB': 2,  # DB 2 사용 (모두 분리)
        'DEFAULT_TIMEOUT': 360,
    },
    'high': {
        'HOST': REDIS_HOST,
        'PORT': REDIS_PORT,
        'DB': 2,
        'DEFAULT_TIMEOUT': 500,
    },
    'low': {
        'HOST': REDIS_HOST,
        'PORT': REDIS_PORT,
        'DB': 2,
        'DEFAULT_TIMEOUT': 600,
    }
}


CELERY_BEAT_SCHEDULER = 'scheduler_job.custom_beat_scheduler.CustomDatabaseScheduler'
# Celery 설정 임포트
try:
    from .settings_celery import *    
    # 기존 RQ 큐와 충돌 방지를 위해 다른 DB 사용
    # settings.py에서 RQ는 DB 2를 사용하므로, Celery는 DB 3 사용
    CELERY_BROKER_URL = f"{REDIS_BASE_URL}/3"
    CELERY_RESULT_BACKEND = f"{REDIS_BASE_URL}/3"
except ImportError:
   raise ImportError("settings_celery.py 파일을 찾을 수 없습니다.")
except Exception as e:
    print(f"Celery 설정 중 오류: {e}")
    raise e


# https://stackoverflow.com/questions/47585583/the-number-of-get-post-parameters-exceeded-settings-data-upload-max-number-field
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240 # higher than the count of fields

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ko-KR' #'en-us'

TIME_ZONE = 'Asia/Seoul'  # 한국 시간 적용 
DATETIME_FORMAT = 'Y-m-d H:i:s' 

USE_I18N = True

# USE_TZ = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html
MEDIA_URL = '/media/'

# MEDIA_ROOT = '/vol/django/media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  if IS_DOCKER else dotenv.get_key(env_file, 'MEDIA_ROOT')
if not os.path.exists(MEDIA_ROOT):
    raise FileNotFoundError(f"MEDIA_ROOT: {MEDIA_ROOT} not found")
# MEDIA_ROOT = '/home/kkt/django-nas'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'  

X_FRAME_OPTIONS = 'SAMEORIGIN'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'users.customPage.CustomPagination',
    
    'DEFAULT_PARSER_CLASSES':[
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ]
}
## 로그 설정
from shapi.setting_log import setup_logging
LOGGING = setup_logging()


SPECTACULAR_SETTINGS = {
    'COMPONENT_SPLIT_REQUEST': True,
}

CORS_ALLOW_METHODS = [  # 허용할 옵션
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [ # 허용할 헤더
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
CORS_ALLOW_CREDENTIALS = True

### 브라우저에서 Cross-Origin 요청 허용
### fetch, axios, XHR 등 JavaScript 요청 시 허용
CORS_ALLOWED_ORIGINS = [
    "https://example.com",
    "http://localhost:8080",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5500",
    "http://127.0.0.1:5501",
    "http://192.168.7.108:3000",
    "http://192.168.7.108:9999",
    "http://mes.swgroup.co.kr:9999",
    "http://192.168.10.249:9999",
    "http://10.10.0.10:9999",
]
CORS_ALLOW_ALL_ORIGINS=True

### Django의 CSRF 체크 시 Origin 검증 허용
### POST, PUT, PATCH, DELETE 등 상태 변경 요청 시 Origin 검증 허용
CSRF_TRUSTED_ORIGINS = [
    "http://192.168.7.108:9999",
    "http://mes.swgroup.co.kr:9999",
    "http://192.168.10.249:9999",
    "http://10.10.0.10:9999",
]

# # APScheduler 설정
# APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"  # 날짜 형식
# SCHEDULER_DEFAULT = True  # 기본 스케줄러 활성화

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=45),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=16),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('JWT',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


###### global CONSTANT
IP_BASE = '192.168.7.108'
# IP_BASE = 'mes.swgroup.co.kr'
WS_BASE_PORT = '9998'
WS_BASE_URL = f'ws://{IP_BASE}:{WS_BASE_PORT}'

WS_APP_AUTHORITY = f'{WS_BASE_URL}/broadcast/app_authority/'
WS_USER_CHANGED = f'{WS_BASE_URL}/broadcast/user_changed/'
WS_CS_CLAIM_CHANGED = f'{WS_BASE_URL}/broadcast/cs_claim_changed/'
WS_ERROR_LOG_CREATED = f'{WS_BASE_URL}/broadcast/error_log_created/'

WS_BROADCAST_TEST = f'{WS_BASE_URL}/broadcast/test/'

### APP BASED
WS_영업수주_금액_DB_UPDATED = f'{WS_BASE_URL}/broadcast/sales_order_amount_changed/'
WS_URL_영업수주진행현황 = f'{WS_BASE_URL}/broadcast/sales_order_register_api_progress/'

SAVE_MODEL_REQUEST = "save_model_request"
